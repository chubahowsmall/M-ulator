//************************************************************
// Desciption: DLCv1 Register File Header File
//      Generated by genRF 04/18/2016 13:55:24
//************************************************************

#ifndef DLCV1_RF_H
#define DLCV1_RF_H

// Register 0x00 [AMBA:0xA0000000]
typedef union dlcv1_r00{
  struct{
    unsigned MBUS_R0		: 24;
  };
  uint32_t as_int;
} dlcv1_r00_t;
#define DLCv1_R00_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r00_t) == 4, "Punned Structure Size");

// Register 0x01 [AMBA:0xA0000004]
typedef union dlcv1_r01{
  struct{
    unsigned MBUS_R1		: 24;
  };
  uint32_t as_int;
} dlcv1_r01_t;
#define DLCv1_R01_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r01_t) == 4, "Punned Structure Size");

// Register 0x02 [AMBA:0xA0000008]
typedef union dlcv1_r02{
  struct{
    unsigned MBUS_R2		: 24;
  };
  uint32_t as_int;
} dlcv1_r02_t;
#define DLCv1_R02_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r02_t) == 4, "Punned Structure Size");

// Register 0x03 [AMBA:0xA000000C]
typedef union dlcv1_r03{
  struct{
    unsigned MBUS_R3		: 24;
  };
  uint32_t as_int;
} dlcv1_r03_t;
#define DLCv1_R03_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r03_t) == 4, "Punned Structure Size");

// Register 0x04 [AMBA:0xA0000010]
typedef union dlcv1_r04{
  struct{
    unsigned MBUS_R4		: 24;
  };
  uint32_t as_int;
} dlcv1_r04_t;
#define DLCv1_R04_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r04_t) == 4, "Punned Structure Size");

// Register 0x05 [AMBA:0xA0000014]
typedef union dlcv1_r05{
  struct{
    unsigned MBUS_R5		: 24;
  };
  uint32_t as_int;
} dlcv1_r05_t;
#define DLCv1_R05_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r05_t) == 4, "Punned Structure Size");

// Register 0x06 [AMBA:0xA0000018]
typedef union dlcv1_r06{
  struct{
    unsigned MBUS_R6		: 24;
  };
  uint32_t as_int;
} dlcv1_r06_t;
#define DLCv1_R06_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r06_t) == 4, "Punned Structure Size");

// Register 0x07 [AMBA:0xA000001C]
typedef union dlcv1_r07{
  struct{
    unsigned MBUS_R7		: 24;
  };
  uint32_t as_int;
} dlcv1_r07_t;
#define DLCv1_R07_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r07_t) == 4, "Punned Structure Size");

// Register 0x08 [AMBA:0xA0000020]
// -- EMPTY --

// Register 0x09 [AMBA:0xA0000024]
typedef union dlcv1_r09{
  struct{
    unsigned MBUS_THRES		: 20;
  };
  uint32_t as_int;
} dlcv1_r09_t;
#define DLCv1_R09_DEFAULT {{0x80008}}
_Static_assert(sizeof(dlcv1_r09_t) == 4, "Punned Structure Size");

// Register 0x0A [AMBA:0xA0000028]
typedef union dlcv1_r0A{
  struct{
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    unsigned CONFIG_HALT_CPU		: 4;
  };
  uint32_t as_int;
} dlcv1_r0A_t;
#define DLCv1_R0A_DEFAULT {{ /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */ 0xA}}
_Static_assert(sizeof(dlcv1_r0A_t) == 4, "Punned Structure Size");

// Register 0x0B [AMBA:0xA000002C]
typedef union dlcv1_r0B{
  struct{
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    unsigned DSLP_CLK_GEN_FAST_MODE		: 1;
    unsigned CLK_GEN_RING		: 2;
    unsigned CLK_GEN_DIV_MBC		: 2;
    unsigned CLK_GEN_DIV_CORE		: 2;
    unsigned CLK_GEN_HIGH_FREQ		: 1;
  };
  uint32_t as_int;
} dlcv1_r0B_t;
#define DLCv1_R0B_DEFAULT {{ /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */ 0x0, 0x1, 0x1, 0x3, 0x0}}
_Static_assert(sizeof(dlcv1_r0B_t) == 4, "Punned Structure Size");

// Register 0x0C [AMBA:0xA0000030]
// -- EMPTY --

// Register 0x0D [AMBA:0xA0000034]
// -- EMPTY --

// Register 0x0E [AMBA:0xA0000038]
// -- EMPTY --

// Register 0x0F [AMBA:0xA000003C]
// -- EMPTY --

// Register 0x10 [AMBA:0xA0000040]
typedef union dlcv1_r10{
  struct{
    unsigned RUN_CPU		: 1;
  };
  uint32_t as_int;
} dlcv1_r10_t;
#define DLCv1_R10_DEFAULT {{0x0}}
_Static_assert(sizeof(dlcv1_r10_t) == 4, "Punned Structure Size");

// Register 0x11 [AMBA:0xA0000044]
// -- EMPTY --

// Register 0x12 [AMBA:0xA0000048]
// -- EMPTY --

// Register 0x13 [AMBA:0xA000004C]
// -- EMPTY --

// Register 0x14 [AMBA:0xA0000050]
// -- EMPTY --

// Register 0x15 [AMBA:0xA0000054]
// -- EMPTY --

// Register 0x16 [AMBA:0xA0000058]
// -- EMPTY --

// Register 0x17 [AMBA:0xA000005C]
// -- EMPTY --

// Register 0x18 [AMBA:0xA0000060]
// -- EMPTY --

// Register 0x19 [AMBA:0xA0000064]
// -- EMPTY --

// Register 0x1A [AMBA:0xA0000068]
// -- EMPTY --

// Register 0x1B [AMBA:0xA000006C]
// -- EMPTY --

// Register 0x1C [AMBA:0xA0000070]
// -- EMPTY --

// Register 0x1D [AMBA:0xA0000074]
// -- EMPTY --

// Register 0x1E [AMBA:0xA0000078]
// -- EMPTY --

// Register 0x1F [AMBA:0xA000007C]
// -- EMPTY --

// Register 0x20 [AMBA:0xA0000080]
// -- EMPTY --

// Register 0x21 [AMBA:0xA0000084]
// -- EMPTY --

// Register 0x22 [AMBA:0xA0000088]
// -- EMPTY --

// Register 0x23 [AMBA:0xA000008C]
// -- EMPTY --

// Register 0x24 [AMBA:0xA0000090]
// -- EMPTY --

// Register 0x25 [AMBA:0xA0000094]
// -- EMPTY --

// Register 0x26 [AMBA:0xA0000098]
// -- EMPTY --

// Register 0x27 [AMBA:0xA000009C]
// -- EMPTY --

// Register 0x28 [AMBA:0xA00000A0]
// -- EMPTY --

// Register 0x29 [AMBA:0xA00000A4]
// -- EMPTY --

// Register 0x2A [AMBA:0xA00000A8]
// -- EMPTY --

// Register 0x2B [AMBA:0xA00000AC]
// -- EMPTY --

// Register 0x2C [AMBA:0xA00000B0]
// -- EMPTY --

// Register 0x2D [AMBA:0xA00000B4]
// -- EMPTY --

// Register 0x2E [AMBA:0xA00000B8]
// -- EMPTY --

// Register 0x2F [AMBA:0xA00000BC]
// -- EMPTY --

// Register 0x30 [AMBA:0xA00000C0]
// -- EMPTY --

// Register 0x31 [AMBA:0xA00000C4]
// -- EMPTY --

// Register 0x32 [AMBA:0xA00000C8]
// -- EMPTY --

// Register 0x33 [AMBA:0xA00000CC]
// -- EMPTY --

// Register 0x34 [AMBA:0xA00000D0]
// -- EMPTY --

// Register 0x35 [AMBA:0xA00000D4]
// -- EMPTY --

// Register 0x36 [AMBA:0xA00000D8]
// -- EMPTY --

// Register 0x37 [AMBA:0xA00000DC]
// -- EMPTY --

// Register 0x38 [AMBA:0xA00000E0]
// -- EMPTY --

// Register 0x39 [AMBA:0xA00000E4]
// -- EMPTY --

// Register 0x3A [AMBA:0xA00000E8]
// -- EMPTY --

// Register 0x3B [AMBA:0xA00000EC]
// -- EMPTY --

// Register 0x3C [AMBA:0xA00000F0]
// -- EMPTY --

// Register 0x3D [AMBA:0xA00000F4]
// -- EMPTY --

// Register 0x3E [AMBA:0xA00000F8]
// -- EMPTY --

// Register 0x3F [AMBA:0xA00000FC]
typedef union dlcv1_r3F{
  struct{
    unsigned DLC_RESETN		: 1;
  };
  uint32_t as_int;
} dlcv1_r3F_t;
#define DLCv1_R3F_DEFAULT {{0x0}}
_Static_assert(sizeof(dlcv1_r3F_t) == 4, "Punned Structure Size");

// Register 0x40 [AMBA:0xA0000100]
typedef union dlcv1_r40{
  struct{
    unsigned SRAM_L1_TUNE		: 22;
  };
  uint32_t as_int;
} dlcv1_r40_t;
#define DLCv1_R40_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r40_t) == 4, "Punned Structure Size");

// Register 0x41 [AMBA:0xA0000104]
typedef union dlcv1_r41{
  struct{
    unsigned SRAM_L2_TUNE		: 22;
  };
  uint32_t as_int;
} dlcv1_r41_t;
#define DLCv1_R41_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r41_t) == 4, "Punned Structure Size");

// Register 0x42 [AMBA:0xA0000108]
typedef union dlcv1_r42{
  struct{
    unsigned SRAM_L3_TUNE		: 22;
  };
  uint32_t as_int;
} dlcv1_r42_t;
#define DLCv1_R42_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r42_t) == 4, "Punned Structure Size");

// Register 0x43 [AMBA:0xA000010C]
typedef union dlcv1_r43{
  struct{
    unsigned SRAM_L4_TUNE		: 22;
  };
  uint32_t as_int;
} dlcv1_r43_t;
#define DLCv1_R43_DEFAULT {{0x000000}}
_Static_assert(sizeof(dlcv1_r43_t) == 4, "Punned Structure Size");

// Register 0x44 [AMBA:0xA0000110]
// -- EMPTY --

// Register 0x45 [AMBA:0xA0000114]
typedef union dlcv1_r45{
  struct{
    unsigned WAIT_BEFORE_LOWER_VDD		: 5;
  };
  uint32_t as_int;
} dlcv1_r45_t;
#define DLCv1_R45_DEFAULT {{0x00}}
_Static_assert(sizeof(dlcv1_r45_t) == 4, "Punned Structure Size");

// Register 0x46 [AMBA:0xA0000118]
typedef union dlcv1_r46{
  struct{
    unsigned STAB_TIME_ENABLE_PG		: 3;
  };
  uint32_t as_int;
} dlcv1_r46_t;
#define DLCv1_R46_DEFAULT {{0x0}}
_Static_assert(sizeof(dlcv1_r46_t) == 4, "Punned Structure Size");

// Register 0x47 [AMBA:0xA000011C]
typedef union dlcv1_r47{
  struct{
    unsigned VREF_GEN_SEL_0		: 8;
  };
  uint32_t as_int;
} dlcv1_r47_t;
#define DLCv1_R47_DEFAULT {{0x00}}
_Static_assert(sizeof(dlcv1_r47_t) == 4, "Punned Structure Size");

// Register 0x48 [AMBA:0xA0000120]
typedef union dlcv1_r48{
  struct{
    unsigned VREF_GEN_SEL_1		: 8;
  };
  uint32_t as_int;
} dlcv1_r48_t;
#define DLCv1_R48_DEFAULT {{0x00}}
_Static_assert(sizeof(dlcv1_r48_t) == 4, "Punned Structure Size");

// Register 0x49 [AMBA:0xA0000124]
typedef union dlcv1_r49{
  struct{
    unsigned VREF_GEN_SEL_2		: 8;
  };
  uint32_t as_int;
} dlcv1_r49_t;
#define DLCv1_R49_DEFAULT {{0x00}}
_Static_assert(sizeof(dlcv1_r49_t) == 4, "Punned Structure Size");

// Register 0x4A [AMBA:0xA0000128]
typedef union dlcv1_r4A{
  struct{
    unsigned VREF_GEN_SEL_3		: 8;
  };
  uint32_t as_int;
} dlcv1_r4A_t;
#define DLCv1_R4A_DEFAULT {{0x00}}
_Static_assert(sizeof(dlcv1_r4A_t) == 4, "Punned Structure Size");

// Register 0x4B [AMBA:0xA000012C]
typedef union dlcv1_r4B{
  struct{
    unsigned VREF_MUX_SEL_PE0_L1		: 2;
    unsigned VREF_MUX_SEL_PE0_L2		: 2;
    unsigned VREF_MUX_SEL_PE0_L3		: 2;
    unsigned VREF_MUX_SEL_PE0_L4		: 2;
  };
  uint32_t as_int;
} dlcv1_r4B_t;
#define DLCv1_R4B_DEFAULT {{0x0, 0x0, 0x0, 0x0}}
_Static_assert(sizeof(dlcv1_r4B_t) == 4, "Punned Structure Size");

// Register 0x4C [AMBA:0xA0000130]
typedef union dlcv1_r4C{
  struct{
    unsigned VREF_MUX_SEL_PE1_L1		: 2;
    unsigned VREF_MUX_SEL_PE1_L2		: 2;
    unsigned VREF_MUX_SEL_PE1_L3		: 2;
    unsigned VREF_MUX_SEL_PE1_L4		: 2;
  };
  uint32_t as_int;
} dlcv1_r4C_t;
#define DLCv1_R4C_DEFAULT {{0x0, 0x0, 0x0, 0x0}}
_Static_assert(sizeof(dlcv1_r4C_t) == 4, "Punned Structure Size");

// Register 0x4D [AMBA:0xA0000134]
typedef union dlcv1_r4D{
  struct{
    unsigned VREF_MUX_SEL_PE2_L1		: 2;
    unsigned VREF_MUX_SEL_PE2_L2		: 2;
    unsigned VREF_MUX_SEL_PE2_L3		: 2;
    unsigned VREF_MUX_SEL_PE2_L4		: 2;
  };
  uint32_t as_int;
} dlcv1_r4D_t;
#define DLCv1_R4D_DEFAULT {{0x0, 0x0, 0x0, 0x0}}
_Static_assert(sizeof(dlcv1_r4D_t) == 4, "Punned Structure Size");

// Register 0x4E [AMBA:0xA0000138]
typedef union dlcv1_r4E{
  struct{
    unsigned VREF_MUX_SEL_PE3_L1		: 2;
    unsigned VREF_MUX_SEL_PE3_L2		: 2;
    unsigned VREF_MUX_SEL_PE3_L3		: 2;
    unsigned VREF_MUX_SEL_PE3_L4		: 2;
  };
  uint32_t as_int;
} dlcv1_r4E_t;
#define DLCv1_R4E_DEFAULT {{0x0, 0x0, 0x0, 0x0}}
_Static_assert(sizeof(dlcv1_r4E_t) == 4, "Punned Structure Size");

// Register 0x4F [AMBA:0xA000013C]
// -- EMPTY --

// Register 0x50 [AMBA:0xA0000140]
// -- EMPTY --

// Register 0x51 [AMBA:0xA0000144]
// -- EMPTY --

// Register 0x52 [AMBA:0xA0000148]
// -- EMPTY --

// Register 0x53 [AMBA:0xA000014C]
// -- EMPTY --

// Register 0x54 [AMBA:0xA0000150]
// -- EMPTY --

// Register 0x55 [AMBA:0xA0000154]
// -- EMPTY --

// Register 0x56 [AMBA:0xA0000158]
// -- EMPTY --

// Register 0x57 [AMBA:0xA000015C]
// -- EMPTY --

// Register 0x58 [AMBA:0xA0000160]
// -- EMPTY --

// Register 0x59 [AMBA:0xA0000164]
// -- EMPTY --

// Register 0x5A [AMBA:0xA0000168]
// -- EMPTY --

// Register 0x5B [AMBA:0xA000016C]
// -- EMPTY --

// Register 0x5C [AMBA:0xA0000170]
// -- EMPTY --

// Register 0x5D [AMBA:0xA0000174]
// -- EMPTY --

// Register 0x5E [AMBA:0xA0000178]
// -- EMPTY --

// Register 0x5F [AMBA:0xA000017C]
// -- EMPTY --

// Register 0x60 [AMBA:0xA0000180]
// -- EMPTY --

// Register 0x61 [AMBA:0xA0000184]
// -- EMPTY --

// Register 0x62 [AMBA:0xA0000188]
// -- EMPTY --

// Register 0x63 [AMBA:0xA000018C]
// -- EMPTY --

// Register 0x64 [AMBA:0xA0000190]
// -- EMPTY --

// Register 0x65 [AMBA:0xA0000194]
// -- EMPTY --

// Register 0x66 [AMBA:0xA0000198]
// -- EMPTY --

// Register 0x67 [AMBA:0xA000019C]
// -- EMPTY --

// Register 0x68 [AMBA:0xA00001A0]
// -- EMPTY --

// Register 0x69 [AMBA:0xA00001A4]
// -- EMPTY --

// Register 0x6A [AMBA:0xA00001A8]
// -- EMPTY --

// Register 0x6B [AMBA:0xA00001AC]
// -- EMPTY --

// Register 0x6C [AMBA:0xA00001B0]
// -- EMPTY --

// Register 0x6D [AMBA:0xA00001B4]
// -- EMPTY --

// Register 0x6E [AMBA:0xA00001B8]
// -- EMPTY --

// Register 0x6F [AMBA:0xA00001BC]
// -- EMPTY --

// Register 0x70 [AMBA:0xA00001C0]
// -- EMPTY --

// Register 0x71 [AMBA:0xA00001C4]
// -- EMPTY --

// Register 0x72 [AMBA:0xA00001C8]
// -- EMPTY --

// Register 0x73 [AMBA:0xA00001CC]
// -- EMPTY --

// Register 0x74 [AMBA:0xA00001D0]
// -- EMPTY --

// Register 0x75 [AMBA:0xA00001D4]
// -- EMPTY --

// Register 0x76 [AMBA:0xA00001D8]
// -- EMPTY --

// Register 0x77 [AMBA:0xA00001DC]
// -- EMPTY --

// Register 0x78 [AMBA:0xA00001E0]
// -- EMPTY --

// Register 0x79 [AMBA:0xA00001E4]
// -- EMPTY --

// Register 0x7A [AMBA:0xA00001E8]
// -- EMPTY --

// Register 0x7B [AMBA:0xA00001EC]
// -- EMPTY --

// Register 0x7C [AMBA:0xA00001F0]
// -- EMPTY --

// Register 0x7D [AMBA:0xA00001F4]
// -- EMPTY --

// Register 0x7E [AMBA:0xA00001F8]
// -- EMPTY --

// Register 0x7F [AMBA:0xA00001FC]
// -- EMPTY --

// Register 0x80 [AMBA:0xA0000200]
// -- EMPTY --

// Register 0x81 [AMBA:0xA0000204]
// -- EMPTY --

// Register 0x82 [AMBA:0xA0000208]
// -- EMPTY --

// Register 0x83 [AMBA:0xA000020C]
// -- EMPTY --

// Register 0x84 [AMBA:0xA0000210]
// -- EMPTY --

// Register 0x85 [AMBA:0xA0000214]
// -- EMPTY --

// Register 0x86 [AMBA:0xA0000218]
// -- EMPTY --

// Register 0x87 [AMBA:0xA000021C]
// -- EMPTY --

// Register 0x88 [AMBA:0xA0000220]
// -- EMPTY --

// Register 0x89 [AMBA:0xA0000224]
// -- EMPTY --

// Register 0x8A [AMBA:0xA0000228]
// -- EMPTY --

// Register 0x8B [AMBA:0xA000022C]
// -- EMPTY --

// Register 0x8C [AMBA:0xA0000230]
// -- EMPTY --

// Register 0x8D [AMBA:0xA0000234]
// -- EMPTY --

// Register 0x8E [AMBA:0xA0000238]
// -- EMPTY --

// Register 0x8F [AMBA:0xA000023C]
// -- EMPTY --

// Register 0x90 [AMBA:0xA0000240]
// -- EMPTY --

// Register 0x91 [AMBA:0xA0000244]
// -- EMPTY --

// Register 0x92 [AMBA:0xA0000248]
// -- EMPTY --

// Register 0x93 [AMBA:0xA000024C]
// -- EMPTY --

// Register 0x94 [AMBA:0xA0000250]
// -- EMPTY --

// Register 0x95 [AMBA:0xA0000254]
// -- EMPTY --

// Register 0x96 [AMBA:0xA0000258]
// -- EMPTY --

// Register 0x97 [AMBA:0xA000025C]
// -- EMPTY --

// Register 0x98 [AMBA:0xA0000260]
// -- EMPTY --

// Register 0x99 [AMBA:0xA0000264]
// -- EMPTY --

// Register 0x9A [AMBA:0xA0000268]
// -- EMPTY --

// Register 0x9B [AMBA:0xA000026C]
// -- EMPTY --

// Register 0x9C [AMBA:0xA0000270]
// -- EMPTY --

// Register 0x9D [AMBA:0xA0000274]
// -- EMPTY --

// Register 0x9E [AMBA:0xA0000278]
// -- EMPTY --

// Register 0x9F [AMBA:0xA000027C]
// -- EMPTY --

// Register 0xA0 [AMBA:0xA0000280]
// -- EMPTY --

// Register 0xA1 [AMBA:0xA0000284]
// -- EMPTY --

// Register 0xA2 [AMBA:0xA0000288]
// -- EMPTY --

// Register 0xA3 [AMBA:0xA000028C]
// -- EMPTY --

// Register 0xA4 [AMBA:0xA0000290]
// -- EMPTY --

// Register 0xA5 [AMBA:0xA0000294]
// -- EMPTY --

// Register 0xA6 [AMBA:0xA0000298]
// -- EMPTY --

// Register 0xA7 [AMBA:0xA000029C]
// -- EMPTY --

// Register 0xA8 [AMBA:0xA00002A0]
// -- EMPTY --

// Register 0xA9 [AMBA:0xA00002A4]
// -- EMPTY --

// Register 0xAA [AMBA:0xA00002A8]
// -- EMPTY --

// Register 0xAB [AMBA:0xA00002AC]
// -- EMPTY --

// Register 0xAC [AMBA:0xA00002B0]
// -- EMPTY --

// Register 0xAD [AMBA:0xA00002B4]
// -- EMPTY --

// Register 0xAE [AMBA:0xA00002B8]
// -- EMPTY --

// Register 0xAF [AMBA:0xA00002BC]
// -- EMPTY --

// Register 0xB0 [AMBA:0xA00002C0]
// -- EMPTY --

// Register 0xB1 [AMBA:0xA00002C4]
// -- EMPTY --

// Register 0xB2 [AMBA:0xA00002C8]
// -- EMPTY --

// Register 0xB3 [AMBA:0xA00002CC]
// -- EMPTY --

// Register 0xB4 [AMBA:0xA00002D0]
// -- EMPTY --

// Register 0xB5 [AMBA:0xA00002D4]
// -- EMPTY --

// Register 0xB6 [AMBA:0xA00002D8]
// -- EMPTY --

// Register 0xB7 [AMBA:0xA00002DC]
// -- EMPTY --

// Register 0xB8 [AMBA:0xA00002E0]
// -- EMPTY --

// Register 0xB9 [AMBA:0xA00002E4]
// -- EMPTY --

// Register 0xBA [AMBA:0xA00002E8]
// -- EMPTY --

// Register 0xBB [AMBA:0xA00002EC]
// -- EMPTY --

// Register 0xBC [AMBA:0xA00002F0]
// -- EMPTY --

// Register 0xBD [AMBA:0xA00002F4]
// -- EMPTY --

// Register 0xBE [AMBA:0xA00002F8]
// -- EMPTY --

// Register 0xBF [AMBA:0xA00002FC]
// -- EMPTY --

// Register 0xC0 [AMBA:0xA0000300]
// -- EMPTY --

// Register 0xC1 [AMBA:0xA0000304]
// -- EMPTY --

// Register 0xC2 [AMBA:0xA0000308]
// -- EMPTY --

// Register 0xC3 [AMBA:0xA000030C]
// -- EMPTY --

// Register 0xC4 [AMBA:0xA0000310]
// -- EMPTY --

// Register 0xC5 [AMBA:0xA0000314]
// -- EMPTY --

// Register 0xC6 [AMBA:0xA0000318]
// -- EMPTY --

// Register 0xC7 [AMBA:0xA000031C]
// -- EMPTY --

// Register 0xC8 [AMBA:0xA0000320]
// -- EMPTY --

// Register 0xC9 [AMBA:0xA0000324]
// -- EMPTY --

// Register 0xCA [AMBA:0xA0000328]
// -- EMPTY --

// Register 0xCB [AMBA:0xA000032C]
// -- EMPTY --

// Register 0xCC [AMBA:0xA0000330]
// -- EMPTY --

// Register 0xCD [AMBA:0xA0000334]
// -- EMPTY --

// Register 0xCE [AMBA:0xA0000338]
// -- EMPTY --

// Register 0xCF [AMBA:0xA000033C]
// -- EMPTY --

// Register 0xD0 [AMBA:0xA0000340]
// -- EMPTY --

// Register 0xD1 [AMBA:0xA0000344]
// -- EMPTY --

// Register 0xD2 [AMBA:0xA0000348]
// -- EMPTY --

// Register 0xD3 [AMBA:0xA000034C]
// -- EMPTY --

// Register 0xD4 [AMBA:0xA0000350]
// -- EMPTY --

// Register 0xD5 [AMBA:0xA0000354]
// -- EMPTY --

// Register 0xD6 [AMBA:0xA0000358]
// -- EMPTY --

// Register 0xD7 [AMBA:0xA000035C]
// -- EMPTY --

// Register 0xD8 [AMBA:0xA0000360]
// -- EMPTY --

// Register 0xD9 [AMBA:0xA0000364]
// -- EMPTY --

// Register 0xDA [AMBA:0xA0000368]
// -- EMPTY --

// Register 0xDB [AMBA:0xA000036C]
// -- EMPTY --

// Register 0xDC [AMBA:0xA0000370]
// -- EMPTY --

// Register 0xDD [AMBA:0xA0000374]
// -- EMPTY --

// Register 0xDE [AMBA:0xA0000378]
// -- EMPTY --

// Register 0xDF [AMBA:0xA000037C]
// -- EMPTY --

// Register 0xE0 [AMBA:0xA0000380]
// -- EMPTY --

// Register 0xE1 [AMBA:0xA0000384]
// -- EMPTY --

// Register 0xE2 [AMBA:0xA0000388]
// -- EMPTY --

// Register 0xE3 [AMBA:0xA000038C]
typedef union dlcv1_rE3{
  struct{
    unsigned STR_WR_CH3_WR_BUF_LOWER		: 16;
    unsigned STR_WR_CH3_ALT_ADDR		: 8;
  };
  uint32_t as_int;
} dlcv1_rE3_t;
#define DLCv1_RE3_DEFAULT {{0x0000, 0x00}}
_Static_assert(sizeof(dlcv1_rE3_t) == 4, "Punned Structure Size");

// Register 0xE4 [AMBA:0xA0000390]
typedef union dlcv1_rE4{
  struct{
    unsigned STR_WR_CH3_WR_BUF_UPPER		: 16;
    unsigned STR_WR_CH3_ALT_REG_WR		: 8;
  };
  uint32_t as_int;
} dlcv1_rE4_t;
#define DLCv1_RE4_DEFAULT {{0x0000, 0x00}}
_Static_assert(sizeof(dlcv1_rE4_t) == 4, "Punned Structure Size");

// Register 0xE5 [AMBA:0xA0000394]
typedef union dlcv1_rE5{
  struct{
    unsigned STR_WR_CH3_BUF_LEN		: 20;
    // ** NOT-DEFINED ** //
    unsigned STR_WR_CH3_DBLB		: 1;
    unsigned STR_WR_CH3_WRP		: 1;
    unsigned STR_WR_CH3_EN		: 1;
  };
  uint32_t as_int;
} dlcv1_rE5_t;
#define DLCv1_RE5_DEFAULT {{0x007FF /* NOT-DEFINED */ , 0x0, 0x0, 0x1}}
_Static_assert(sizeof(dlcv1_rE5_t) == 4, "Punned Structure Size");

// Register 0xE6 [AMBA:0xA0000398]
typedef union dlcv1_rE6{
  struct{
    unsigned STR_WR_CH3_BUF_OFF		: 20;
  };
  uint32_t as_int;
} dlcv1_rE6_t;
#define DLCv1_RE6_DEFAULT {{0x00000}}
_Static_assert(sizeof(dlcv1_rE6_t) == 4, "Punned Structure Size");

// Register 0xE7 [AMBA:0xA000039C]
typedef union dlcv1_rE7{
  struct{
    unsigned STR_WR_CH2_WR_BUF_LOWER		: 16;
    unsigned STR_WR_CH2_ALT_ADDR		: 8;
  };
  uint32_t as_int;
} dlcv1_rE7_t;
#define DLCv1_RE7_DEFAULT {{0x0000, 0x00}}
_Static_assert(sizeof(dlcv1_rE7_t) == 4, "Punned Structure Size");

// Register 0xE8 [AMBA:0xA00003A0]
typedef union dlcv1_rE8{
  struct{
    unsigned STR_WR_CH2_WR_BUF_UPPER		: 16;
    unsigned STR_WR_CH2_ALT_REG_WR		: 8;
  };
  uint32_t as_int;
} dlcv1_rE8_t;
#define DLCv1_RE8_DEFAULT {{0x0000, 0x00}}
_Static_assert(sizeof(dlcv1_rE8_t) == 4, "Punned Structure Size");

// Register 0xE9 [AMBA:0xA00003A4]
typedef union dlcv1_rE9{
  struct{
    unsigned STR_WR_CH2_BUF_LEN		: 20;
    // ** NOT-DEFINED ** //
    unsigned STR_WR_CH2_DBLB		: 1;
    unsigned STR_WR_CH2_WRP		: 1;
    unsigned STR_WR_CH2_EN		: 1;
  };
  uint32_t as_int;
} dlcv1_rE9_t;
#define DLCv1_RE9_DEFAULT {{0x007FF /* NOT-DEFINED */ , 0x0, 0x0, 0x1}}
_Static_assert(sizeof(dlcv1_rE9_t) == 4, "Punned Structure Size");

// Register 0xEA [AMBA:0xA00003A8]
typedef union dlcv1_rEA{
  struct{
    unsigned STR_WR_CH2_BUF_OFF		: 20;
  };
  uint32_t as_int;
} dlcv1_rEA_t;
#define DLCv1_REA_DEFAULT {{0x00000}}
_Static_assert(sizeof(dlcv1_rEA_t) == 4, "Punned Structure Size");

// Register 0xEB [AMBA:0xA00003AC]
typedef union dlcv1_rEB{
  struct{
    unsigned STR_WR_CH1_WR_BUF_LOWER		: 16;
    unsigned STR_WR_CH1_ALT_ADDR		: 8;
  };
  uint32_t as_int;
} dlcv1_rEB_t;
#define DLCv1_REB_DEFAULT {{0x0000, 0x00}}
_Static_assert(sizeof(dlcv1_rEB_t) == 4, "Punned Structure Size");

// Register 0xEC [AMBA:0xA00003B0]
typedef union dlcv1_rEC{
  struct{
    unsigned STR_WR_CH1_WR_BUF_UPPER		: 16;
    unsigned STR_WR_CH1_ALT_REG_WR		: 8;
  };
  uint32_t as_int;
} dlcv1_rEC_t;
#define DLCv1_REC_DEFAULT {{0x0000, 0x00}}
_Static_assert(sizeof(dlcv1_rEC_t) == 4, "Punned Structure Size");

// Register 0xED [AMBA:0xA00003B4]
typedef union dlcv1_rED{
  struct{
    unsigned STR_WR_CH1_BUF_LEN		: 20;
    // ** NOT-DEFINED ** //
    unsigned STR_WR_CH1_DBLB		: 1;
    unsigned STR_WR_CH1_WRP		: 1;
    unsigned STR_WR_CH1_EN		: 1;
  };
  uint32_t as_int;
} dlcv1_rED_t;
#define DLCv1_RED_DEFAULT {{0x007FF /* NOT-DEFINED */ , 0x0, 0x0, 0x1}}
_Static_assert(sizeof(dlcv1_rED_t) == 4, "Punned Structure Size");

// Register 0xEE [AMBA:0xA00003B8]
typedef union dlcv1_rEE{
  struct{
    unsigned STR_WR_CH1_BUF_OFF		: 20;
  };
  uint32_t as_int;
} dlcv1_rEE_t;
#define DLCv1_REE_DEFAULT {{0x00000}}
_Static_assert(sizeof(dlcv1_rEE_t) == 4, "Punned Structure Size");

// Register 0xEF [AMBA:0xA00003BC]
typedef union dlcv1_rEF{
  struct{
    unsigned STR_WR_CH0_WR_BUF_LOWER		: 16;
    unsigned STR_WR_CH0_ALT_ADDR		: 8;
  };
  uint32_t as_int;
} dlcv1_rEF_t;
#define DLCv1_REF_DEFAULT {{0x0000, 0x00}}
_Static_assert(sizeof(dlcv1_rEF_t) == 4, "Punned Structure Size");

// Register 0xF0 [AMBA:0xA00003C0]
typedef union dlcv1_rF0{
  struct{
    unsigned STR_WR_CH0_WR_BUF_UPPER		: 16;
    unsigned STR_WR_CH0_ALT_REG_WR		: 8;
  };
  uint32_t as_int;
} dlcv1_rF0_t;
#define DLCv1_RF0_DEFAULT {{0x0000, 0x00}}
_Static_assert(sizeof(dlcv1_rF0_t) == 4, "Punned Structure Size");

// Register 0xF1 [AMBA:0xA00003C4]
typedef union dlcv1_rF1{
  struct{
    unsigned STR_WR_CH0_BUF_LEN		: 20;
    // ** NOT-DEFINED ** //
    unsigned STR_WR_CH0_DBLB		: 1;
    unsigned STR_WR_CH0_WRP		: 1;
    unsigned STR_WR_CH0_EN		: 1;
  };
  uint32_t as_int;
} dlcv1_rF1_t;
#define DLCv1_RF1_DEFAULT {{0x007FF /* NOT-DEFINED */ , 0x0, 0x0, 0x1}}
_Static_assert(sizeof(dlcv1_rF1_t) == 4, "Punned Structure Size");

// Register 0xF2 [AMBA:0xA00003C8]
typedef union dlcv1_rF2{
  struct{
    unsigned STR_WR_CH0_BUF_OFF		: 20;
  };
  uint32_t as_int;
} dlcv1_rF2_t;
#define DLCv1_RF2_DEFAULT {{0x00000}}
_Static_assert(sizeof(dlcv1_rF2_t) == 4, "Punned Structure Size");

// Register 0xF3 [AMBA:0xA00003CC]
typedef union dlcv1_rF3{
  struct{
    unsigned BLK_WR_LENGTH_LIMIT		: 20;
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    unsigned BLK_WR_CACT		: 1;
    unsigned BLK_WR_EN		: 1;
  };
  uint32_t as_int;
} dlcv1_rF3_t;
#define DLCv1_RF3_DEFAULT {{0x00000 /* NOT-DEFINED */  /* NOT-DEFINED */ , 0x0, 0x1}}
_Static_assert(sizeof(dlcv1_rF3_t) == 4, "Punned Structure Size");

// Register 0xF4 [AMBA:0xA00003D0]
// -- EMPTY --

// Register 0xF5 [AMBA:0xA00003D4]
// -- EMPTY --

// Register 0xF6 [AMBA:0xA00003D8]
// -- EMPTY --

// Register 0xF7 [AMBA:0xA00003DC]
// -- EMPTY --

// Register 0xF8 [AMBA:0xA00003E0]
// -- EMPTY --

// Register 0xF9 [AMBA:0xA00003E4]
// -- EMPTY --

// Register 0xFA [AMBA:0xA00003E8]
// -- EMPTY --

// Register 0xFB [AMBA:0xA00003EC]
// -- EMPTY --

// Register 0xFC [AMBA:0xA00003F0]
// -- EMPTY --

// Register 0xFD [AMBA:0xA00003F4]
// -- EMPTY --

// Register 0xFE [AMBA:0xA00003F8]
// -- EMPTY --

// Register 0xFF [AMBA:0xA00003FC]
typedef union dlcv1_rFF{
  struct{
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    // ** NOT-DEFINED ** //
    unsigned ACT_RST		: 1;
  };
  uint32_t as_int;
} dlcv1_rFF_t;
#define DLCv1_RFF_DEFAULT {{ /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */  /* NOT-DEFINED */ 0x1}}
_Static_assert(sizeof(dlcv1_rFF_t) == 4, "Punned Structure Size");

#endif // DLCV1_RF_H