//*******************************************************************
//Author: Yejoong Kim Ziyun Li Cao Gao
//Description: M0 code for Deep Learning Processor project
//*******************************************************************
#include "DLCv1.h"
//#include "FLSv2S_RF.h"
//#include "PMUv2_RF.h"
#include "DLCv1_RF.h"
#include "mbus.h"
#include "dnn_parameters.h"
#include "utils.h"

#define DLC_ADDR    0x4

//********************************************************************
// Global Variables
//********************************************************************
volatile uint32_t enumerated;
volatile uint32_t cyc_num;
volatile uint32_t irq_history;

//*******************************************************************
// INTERRUPT HANDLERS
//*******************************************************************
void handler_ext_int_0(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_1(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_2(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_3(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_4(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_5(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_6(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_7(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_8(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_9(void)  __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_10(void) __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_11(void) __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_12(void) __attribute__ ((interrupt ("IRQ")));
void handler_ext_int_13(void) __attribute__ ((interrupt ("IRQ")));

void handler_ext_int_0(void) { *NVIC_ICPR = (0x1 << 0); // TIMER32
    irq_history |= (0x1 << 0);
    *REG0 = 0x1000;
    *REG1 = 0x1;//*TIMER32_CNT;
    *REG2 = 0x1;///*TIMER32_STAT;
    //*TIMER32_STAT = 0x0;
    arb_debug_reg (0xA0000000);
    arb_debug_reg ((0xA1 << 24) | *REG0); // 0x1000
    arb_debug_reg ((0xA1 << 24) | *REG1); // TIMER32_CNT
    arb_debug_reg ((0xA1 << 24) | *REG2); // TIMER32_STAT
    }
void handler_ext_int_1(void) { *NVIC_ICPR = (0x1 << 1); // TIMER16
    irq_history |= (0x1 << 1);
    *REG0 = 0x1001;
    *REG1 = 0x1;//*TIMER16_CNT;
    *REG2 = 0x1;//*TIMER16_STAT;
    //*TIMER16_STAT = 0x0;
    arb_debug_reg (0xA0000001);
    arb_debug_reg ((0xA1 << 24) | *REG0); // 0x1001
    arb_debug_reg ((0xA1 << 24) | *REG1); // TIMER16_CNT
    arb_debug_reg ((0xA1 << 24) | *REG2); // TIMER16_STAT
    }
void handler_ext_int_2(void) { *NVIC_ICPR = (0x1 << 2); // REG0
    irq_history |= (0x1 << 2);
    arb_debug_reg (0xA0000002);
}
void handler_ext_int_3(void) { *NVIC_ICPR = (0x1 << 3); // REG1
    irq_history |= (0x1 << 3);
    arb_debug_reg (0xA0000003);
}
void handler_ext_int_4(void) { *NVIC_ICPR = (0x1 << 4); // REG2
    irq_history |= (0x1 << 4);
    arb_debug_reg (0xA0000004);
}
void handler_ext_int_5(void) { *NVIC_ICPR = (0x1 << 5); // REG3
    irq_history |= (0x1 << 5);
    arb_debug_reg (0xA0000005);
}
void handler_ext_int_6(void) { *NVIC_ICPR = (0x1 << 6); // REG4
    irq_history |= (0x1 << 6);
    arb_debug_reg (0xA0000006);
}
void handler_ext_int_7(void) { *NVIC_ICPR = (0x1 << 7); // REG5
    irq_history |= (0x1 << 7);
    arb_debug_reg (0xA0000007);
}
void handler_ext_int_8(void) { *NVIC_ICPR = (0x1 << 8); // REG6
    irq_history |= (0x1 << 8);
    arb_debug_reg (0xA0000008);
}
void handler_ext_int_9(void) { *NVIC_ICPR = (0x1 << 9); // REG7
    irq_history |= (0x1 << 9);
    arb_debug_reg (0xA0000009);
}
void handler_ext_int_10(void) { *NVIC_ICPR = (0x1 << 10); // MEM WR
    irq_history |= (0x1 << 10);
    arb_debug_reg (0xA000000A);
}
void handler_ext_int_11(void) { *NVIC_ICPR = (0x1 << 11); // MBUS_RX
    irq_history |= (0x1 << 11);
    arb_debug_reg (0xA000000B);
}
void handler_ext_int_12(void) { *NVIC_ICPR = (0x1 << 12); // MBUS_TX
    irq_history |= (0x1 << 12);
    arb_debug_reg (0xA000000C);
}
void handler_ext_int_13(void) { *NVIC_ICPR = (0x1 << 13); // MBUS_FWD
    irq_history |= (0x1 << 13);
    arb_debug_reg (0xA000000D);
}

//*******************************************************************
// USER FUNCTIONS
//*******************************************************************
void initialization (void) {

    enumerated = 0xDEADBEEF;
    cyc_num = 0;
    irq_history = 0;

    // Set Halt
    set_halt_until_mbus_rx();

    // Enumeration
    //mbus_enumerate(DLC_ADDR);

    //Set Halt
    set_halt_until_mbus_tx();
}

void pass (uint32_t id, uint32_t data) {
    arb_debug_reg (0x0EA7F00D);
    arb_debug_reg (id);
    arb_debug_reg (data);
}

void fail (uint32_t id, uint32_t data) {
    arb_debug_reg (0xDEADBEEF);
    arb_debug_reg (id);
    arb_debug_reg (data);
    //*REG_CHIP_ID = 0xFFFF; // This will stop the verilog sim.
}

//********************************************************************
// MAIN function starts here             
//********************************************************************
#define STACK_TOP             0x00006000
#define RAW_INPUT_ADDR        0x00006001 
#define FFT_INPUT_ADDR_R      0x00006500 
#define FFT_INPUT_ADDR_I      0x00006a00 
#define WINDOW_PARA_ADDR      0x00007000
#define MFCC_INPUT_ADDR       0x00007400 
#define DCT_PARA_ADDR         0x00008000
#define FFT_PREC 16     // essentially hard-coded: other precision won't work
#define FFT_NUM 256     
#define FFT_NUM_BITS 9  // log2(FFT_NUM) + 1
#define FFT_INST 8      // total number of FFT instructions
#define DFT_SIZE 1
#define FFT_SIZE 512
#define WINDOW_SIZE 400
#define MFCC_SIZE 257
#define PI 3.1415926

///////////
void init_input(int16_t* fft_input, uint16_t windowsize) {
  uint16_t iter;
  for (iter = 0; iter < windowsize; iter++)
    fft_input[iter] = (iter % 10) * 50;
}

void window_init(int16_t* window_parameter, uint16_t windowsize) {
  uint16_t iter;
  for (iter = 0; iter < windowsize; iter++)
    window_parameter[iter] = 1; 
}

///////////
uint32_t pow_2(uint32_t x) {
  uint32_t temp, result;
  switch (x) {
    case 0:
      return 1; 
    case 1:
      return 2; 
    case 2:
      return 4; 
    case 4:
      return 16;
    case 6:
      return 64;
    case 8:
      return 256; 
    case 12:
      return 4096;
    default:
      temp = x - 2;
      result = 4;
      while (temp-- > 0)
        result *= 2; 
      return result;
  }
}

int16_t cos_16(float in) {
  uint16_t shift = pow_2(14);   // shift after multiply with dft parameter
  float in2 = in * in;
  float in4 = in2 * in2;
  float in6 = in4 * in2;
  float result = 1 - in2 / 2 + in4 / 24 - in6 / 720; // taylor series
  return (int)result * shift;
}

int16_t sin_16(float in) {
  uint16_t shift = pow_2(14);   // shift after multiply with dft parameter
  float in2 = in * in;
  float in3 = in2 * in;
  float in5 = in3 * in2;
  float in7 = in5 * in2;
  float result = in - in3 / 6 + in5 / 120 - in7 / 5040; // taylor series
  return (int)result * shift;
}

// copied from stackoverflow
float sqrt(float number) {
   long i;
   float x2, y;
   const float threehalfs = 1.5;

   x2 = number * 0.5;
   y  = number;
   i  = * ( long * ) &y;                     // floating point bit level hacking [sic]
   i  = 0x5f3759df - ( i >> 1 );             // Newton's approximation
   y  = * ( float * ) &i;
   y  = y * ( threehalfs - ( x2 * y * y ) ); // 1st iteration
   y  = y * ( threehalfs - ( x2 * y * y ) ); // 2nd iteration
   y  = y * ( threehalfs - ( x2 * y * y ) ); // 3rd iteration

   return 1/y;
}

int16_t complex_to_real(int16_t real, int16_t imag, uint16_t base) {
  float temp = (float)(real * real / base / base) + (float)(imag * imag / base / base);
  return (int16_t)(sqrt(temp) * base);
}

///////////
void fft_apply_window(uint16_t window_size, int16_t* frame, int16_t* win) {
  uint16_t i;
  for (i = 0; i < window_size; i++)
    frame[i] *= win[i];
}

uint16_t int_bit_reverse(uint16_t input, uint16_t num_bits) {
  uint16_t result = 0;
  uint16_t i;
  for (i = 0; i < num_bits; i++) {
    bool temp = (input >> (num_bits - i - 1) & 1);
    result |= temp << i;
  }
  return result;
}

void prepare_fft(uint16_t window_size, uint16_t fft_size, int16_t* raw_input, int16_t* input, uint16_t fft_num, uint16_t fft_num_bits) {
  uint16_t loc, j;
  // zero padding
  for (loc = window_size; loc < fft_size; loc++) {
    raw_input[loc] = 0;
  }

  // bit reversal
  uint16_t base;
  for (loc = 0; loc < fft_num * 2; loc++) {
    base = int_bit_reverse(loc, fft_num_bits);
    for (j = 0; j < fft_size / fft_num / 2; j++) {
      input[loc + j] = raw_input[base + j * fft_num * 2];
    }
  }
}

void extract_fft_output(int16_t* fft_output_r, int16_t* fft_output_i, int16_t* mfcc_input, uint16_t mfcc_size) {
  uint16_t iter;
  uint16_t base = pow_2(1);  // TODO: int bits 
  for (iter = 0; iter < mfcc_size; iter++) 
    mfcc_input[iter] = complex_to_real(fft_output_r[iter], fft_output_i[iter], base);
}

int main() {
		//////////////////////////////////////////////////////
    // init
    int16_t* raw_fft_input = (int16_t*) RAW_INPUT_ADDR;        // size: 512 * 16 / 8 = 1024 (0x400)
    int16_t* fft_input_r = (int16_t*) FFT_INPUT_ADDR_R;            // size: 512 * 16 / 8 = 1024 (0x400)
    int16_t* fft_input_i = (int16_t*) FFT_INPUT_ADDR_I;            // size: 512 * 16 / 8 = 1024 (0x400)
    int16_t* window_parameter = (int16_t*) WINDOW_PARA_ADDR;   // size: 400 * 16 / 8 = 800 (0x320).
    int16_t* mfcc_input = (int16_t*) MFCC_INPUT_ADDR;          // size: 257 * 16 / 8 = 514 (0x202)
//    int16_t* dct_parameter = DCT_PARA_ADDR;
    *DNN_NLI_A_0 = 0;
    init_input(raw_fft_input, WINDOW_SIZE);
    window_init(window_parameter, WINDOW_SIZE);
//    dft_init(dft_parameter_r, dft_parameter_i, DFT_SIZE);
//    dct_init(dct_parameter);

		//////////////////////////////////////////////////////
    // PE init
/*    
    *REG_WAIT_BEFORE_VDD = 0xff;
      *DNN_SRAM_RSTN_0 = 0x000007ff;
      *DNN_SRAM_RSTN_1 = 0x000007ff;
      *DNN_SRAM_RSTN_2 = 0x000007ff;
      *DNN_SRAM_RSTN_3 = 0x000007ff;
      delay(3);

      *DNN_SRAM_ISOL_0 = 0x000007ff;
      *DNN_SRAM_ISOL_1 = 0x000007ff;
      *DNN_SRAM_ISOL_2 = 0x000007ff;
      *DNN_SRAM_ISOL_3 = 0x000007ff;
      delay(3);

      *DNN_PG_0 = 0x000007ff;
      *DNN_PG_1 = 0x000007ff;
      *DNN_PG_2 = 0x000007ff;
      *DNN_PG_3 = 0x000007ff;
      delay(5);

      //*DNN_PG_0 = 0x003ff800;
      //*DNN_PG_1 = 0x003ff800;
      //*DNN_PG_2 = 0x003ff800;
      //*DNN_PG_3 = 0x003ff800;
      //delay(3);

      *DNN_SRAM_RSTN_0 = 0x000007ff;
      *DNN_SRAM_RSTN_0 = 0xffffffff;
      *DNN_SRAM_RSTN_1 = 0xffffffff;
      *DNN_SRAM_RSTN_2 = 0xffffffff;
      *DNN_SRAM_RSTN_3 = 0xffffffff;
      delay(3);
//      *DNN_RAND_0 = 1;
//      *DNN_RAND_1 = 1;
//      *DNN_RAND_2 = 1;
//      *DNN_RAND_3 = 1;
//      delay(3);
      
      //*DNN_SRAM_ISOL_0 = 0x00000000;
      //*DNN_SRAM_ISOL_1 = 0x00000000;
      //*DNN_SRAM_ISOL_2 = 0x00000000;
      //*DNN_SRAM_ISOL_3 = 0x00000000;
      //delay(3);
*/ 
    *DNN_NLI_A_0 = 1;
		//////////////////////////////////////////////////////
    // M0 working sequence
    
//    fft_apply_window(WINDOW_SIZE, raw_fft_input, window_parameter); 
//    prepare_fft(WINDOW_SIZE, FFT_SIZE, raw_fft_input, fft_input_r, FFT_NUM, FFT_NUM_BITS);
      
    *DNN_NLI_A_0 = 2;
    uint16_t dft_size = DFT_SIZE;
    uint16_t base;
    uint16_t shift = pow_2(14);   // shift after multiply with dft parameter
//    while (dft_size < FFT_SIZE) {
//      for (base = 0; base < FFT_SIZE; base += dft_size*2) {   // one butterfly operation
//        uint16_t twi_interval = FFT_SIZE / dft_size / 2;  // fft_num
//        uint16_t twi_idx = 0;
//        uint16_t idx = 0;
//        for (idx=0; idx < dft_size; idx++) {    // dft_size: half of butterfly length 
//          int16_t twidr = cos_16(-2*twi_idx*PI/FFT_SIZE);
//          int16_t twidi = sin_16(-2*twi_idx*PI/FFT_SIZE);
//          int16_t tempr = fft_input_r[base+idx+dft_size] * twidr - fft_input_i[base+idx+dft_size] * twidi;
//          int16_t tempi = fft_input_r[base+idx+dft_size] * twidi + fft_input_i[base+idx+dft_size] * twidr;
//          tempr /= shift;
//          tempi /= shift;
//          fft_input_r[base+idx+dft_size] = fft_input_r[base+idx] - tempr; // has to compute this first
//          fft_input_r[base+idx] += tempr;
//          fft_input_i[base+idx+dft_size] = fft_input_i[base+idx] - tempi;
//          fft_input_i[base+idx] += tempi;
//          twi_idx += twi_interval;
//        }
//      }
//      dft_size *= 2;
//    }

    *DNN_NLI_A_0 = 2;
		//////////////////////////////////////////////////////

    extract_fft_output(fft_input_r, fft_input_i, mfcc_input, MFCC_SIZE); 
    *DNN_NLI_A_0 = 3;
//    run_mfcc();   // TODO: on PE
//    mfcc_to_dnn(test, test1);

    signal_done();
    delay(7000);

		uint16_t inst_no;
		set_dnn_insts();
		set_nli_parameters();

    return 1;
 		// done
}
